import pytest
from datetime import datetime, timedelta
from unittest.mock import AsyncMock

from archeved.analytics_old.analytics_v1_backup import log_client_activity
from archeved.calculate_quiz_weight import calculate_quiz_weight
from analytics.metrics.get_level_id_word import get_level_id_word

@pytest.mark.asyncio
async def test_process_quiz_end_logic(monkeypatch):
    # –ú–æ–∫–∞–µ–º log_client_activity —á—Ç–æ–±—ã –Ω–µ –ø–∏—Å–∞—Ç—å –≤ –ë–î
    monkeypatch.setattr("analytics.analytics.log_client_activity", AsyncMock())

    # –î–∞–Ω–Ω—ã–µ, –∏–º–∏—Ç–∏—Ä—É—é—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –≤ –∫–æ–Ω—Ü–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
    mock_state = AsyncMock()
    mock_state.get_data.return_value = {
        "words": [
            {"word_src": "el m√©dico", "word_rus": "–≤—Ä–∞—á", "level_id_word": 2},
            {"word_src": "la casa", "word_rus": "–¥–æ–º", "level_id_word": 2},
        ],
        "score": 2,
        "index": 2,
        "level": "—Å—Ä–µ–¥–Ω–∏–π",
        "time_start": (datetime.now() - timedelta(minutes=5)).time()
    }

    # –ú–æ–∫–∞–µ–º message —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    class MockUser:
        id = 123
        username = "testuser"
        first_name = "–ò–º—è"
        last_name = "–§–∞–º–∏–ª–∏—è"
        language_code = "ru"

    class MockMessage:
        from_user = MockUser()
        text = "–ª—é–±–∞—è —Å—Ç—Ä–æ–∫–∞"
        calls = []

        async def answer(self, text, reply_markup=None):
            self.calls.append(text)

    message = MockMessage()

    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —á–∞—Å—Ç—å –ª–æ–≥–∏–∫–∏ –∏–∑ process_quiz_answer
    data = await mock_state.get_data()
    words = data["words"]
    score = data["score"]
    level = data["level"]

    level_id_word = get_level_id_word(level)
    quiz_weight = calculate_quiz_weight([w.get("level_id_word", 1) for w in words])
    time_finish = datetime.now().time()
    time_start = data.get("time_start", time_finish)

    await message.answer(
        f"–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {int(100 * (score / len(words)))}% \n"
        f"({score} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –∏–∑ {len(words)}).\n\n"
        + ("üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!" if score == len(words) else "üéØ –¢—ã –ø–æ—á—Ç–∏ —É —Ü–µ–ª–∏!")
    )

    await log_client_activity(time_start, time_finish, {
        "tg_id": message.from_user.id,
        "username": message.from_user.username,
        "first_name": message.from_user.first_name,
        "last_name": message.from_user.last_name,
        "language_code": message.from_user.language_code,
        "score_quiz": round(score / len(words), 2),
        "words_correct_quiz": score,
        "words_incorrect_quiz": len(words) - score,
        "level_id_word": level_id_word,
        "quiz_weight": quiz_weight
    })

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
    assert any("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!" in c for c in message.calls)
