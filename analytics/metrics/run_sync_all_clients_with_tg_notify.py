# üîÅ –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π –∏ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–∞–±–ª–∏—Ü
import asyncio
import asyncpg
from datetime import datetime
from pathlib import Path
from core.config import DB
from core.config import LOGS_DIR
from analytics.metrics.refresh_user_progress_by_theme import refresh_user_progress

LOG_FILE = LOGS_DIR / "sync_client_analytics.log"


def log(msg: str):
    timestamp = datetime.now().strftime("[%Y-%m-%d %H:%M:%S]")
    line = f"{timestamp} {msg}"
    print(line)
    with open(LOG_FILE, "a", encoding="utf-8") as f:
        f.write(line + "\n")

async def refresh_views(conn, errors: list):
    views = [
        "view_client_level_progress",
        "view_user_progress_by_theme"
    ]
    for view in views:
        try:
            await conn.execute(f"REFRESH MATERIALIZED VIEW CONCURRENTLY {view};")
            log(f"[OK] –û–±–Ω–æ–≤–ª—ë–Ω VIEW: {view}")
        except Exception as e:
            log(f"[ERROR] {view} ‚Äî {e}")
            errors.append(f"{view} ‚Äî {e}")

async def check_tables(conn, errors: list):
    expected = [
        "client_info", "client_analytics", "dictionary", "word_category",
        "study_level", "study_levels", "learned_words",
        "client_activity_log", "user_word_stats", "user_progress_by_theme",
        "client_activity_words", "cron_events"
    ]
    for table in expected:
        try:
            count = await conn.fetchval(f"SELECT COUNT(*) FROM {table};")
            log(f"[CHECK] –¢–∞–±–ª–∏—Ü–∞ {table}: {count} –∑–∞–ø–∏—Å–µ–π")
        except Exception as e:
            log(f"[CHECK ERROR] {table}: {e}")
            errors.append(f"{table} ‚Äî {e}")

async def sync_client_analytics_all():
    log("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    errors = []
    try:
        conn = await asyncpg.connect(**DB)

        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–∞–±–ª–∏—Ü
        await check_tables(conn, errors)

        # 2. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ VIEW'—à–µ–∫
        await refresh_views(conn, errors)

        # 3. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ —Ç–µ–º–∞–º (—á–µ—Ä–µ–∑ TRUNCATE + INSERT)
        log("[DEBUG] –í—ã–∑–æ–≤ refresh_user_progress(conn) –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è")
        await refresh_user_progress(conn)
        log("[DEBUG] –í—ã–∑–æ–≤ refresh_user_progress(conn) –∑–∞–≤–µ—Ä—à—ë–Ω ‚Äî —Ç–∞–±–ª–∏—Ü–∞ user_progress_by_theme –æ–±–Ω–æ–≤–ª–µ–Ω–∞")

        await conn.close()
        log("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    except Exception as e:
        log(f"[FATAL ERROR] {e}")


# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
async def main():
    log("üî• main() –∑–∞–ø—É—â–µ–Ω")
    await sync_client_analytics_all()

if __name__ == "__main__":
    asyncio.run(main())
