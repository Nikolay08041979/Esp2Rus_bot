# üìê calculate_level_current.py

import asyncpg

async def calculate_level_current(conn: asyncpg.Connection, client_id: int) -> int | None:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç level_id_current (1‚Äì6) –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞, –µ—Å–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ª–æ–≤–∏—è –ø–æ –æ—Ö–≤–∞—Ç—É –∏ —Ç–æ—á–Ω–æ—Å—Ç–∏
    """
    # –®–∞–≥ 1: –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—Ä–æ–≤–Ω–µ–π –∏–∑ level_matrix
    level_rows = await conn.fetch(
        "SELECT level_id_client, required_coverage, required_accuracy "
        "FROM level_matrix ORDER BY level_id_client ASC"
    )

    for row in level_rows:
        target_level = row["level_id_client"]
        required_coverage = row["required_coverage"]
        required_accuracy = row["required_accuracy"]

        # –®–∞–≥ 2: –ü–æ–ª—É—á–∏—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –ø–æ —ç—Ç–æ–º—É —É—Ä–æ–≤–Ω—é
        total_words_row = await conn.fetchrow(
            "SELECT COUNT(*) as total FROM dictionary "
            "WHERE lev_id = (SELECT lev_id FROM study_level WHERE lev_name = ("
            "SELECT level_word FROM study_levels WHERE level_id = $1))",
            target_level
        )
        total_words = total_words_row["total"] if total_words_row else 0
        if total_words == 0:
            continue

        # –®–∞–≥ 3: –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞
        learned_row = await conn.fetchrow(
            "SELECT COUNT(*) as learned FROM learned_words lw "
            "JOIN dictionary d ON lw.word_id = d.word_id "
            "WHERE lw.client_id = $1 AND d.lev_id = ("
            "SELECT lev_id FROM study_level WHERE lev_name = ("
            "SELECT level_word FROM study_levels WHERE level_id = $2))",
            client_id, target_level
        )
        learned = learned_row["learned"] if learned_row else 0
        coverage_pct = (learned / total_words) * 100

        if coverage_pct < required_coverage:
            continue

        # –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ—á–Ω–æ—Å—Ç—å –ø–æ —ç—Ç–æ–º—É —É—Ä–æ–≤–Ω—é
        accuracy_row = await conn.fetchrow(
            "SELECT SUM(words_correct_quiz)::float / NULLIF(SUM(words_correct_quiz + words_incorrect_quiz), 0) * 100 AS accuracy "
            "FROM client_activity_log "
            "WHERE client_id = $1 AND level_id_word = $2",
            client_id, target_level
        )
        accuracy = accuracy_row["accuracy"] if accuracy_row else 0
        if accuracy is None or accuracy < required_accuracy:
            continue
        print(f"[DEBUG] –£—Ä–æ–≤–µ–Ω—å –ø—Ä–∏—Å–≤–æ–µ–Ω –∫–ª–∏–µ–Ω—Ç—É <client_id>: –ø–æ–∫—Ä—ã—Ç–∏–µ=<coverage>%, —Ç–æ—á–Ω–æ—Å—Ç—å=<accuracy>%")

        return target_level  # ‚úÖ –í—Å–µ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã

    return None  # ‚ùå –ù–∏ –æ–¥–∏–Ω —É—Ä–æ–≤–µ–Ω—å –Ω–µ –ø–æ–¥–æ—à—ë–ª