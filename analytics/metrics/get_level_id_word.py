
# üìÑ analytics/metrics/get_level_id_word.py

"""
–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç level_id_word (—É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–≤) –∏–∑ —Ç–∞–±–ª–∏—Ü—ã study_levels
–ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —É—Ä–æ–≤–Ω—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–Ω–∞—á–∞–ª—å–Ω—ã–π", "—Å—Ä–µ–¥–Ω–∏–π", "–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π").

–ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º "–≤—Å–µ —É—Ä–æ–≤–Ω–∏" ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç None.
–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏.
"""

import asyncpg
from core.config import DB

async def get_level_id_word(level_name: str) -> int | None:
    if not level_name or level_name.lower() == "–≤—Å–µ —É—Ä–æ–≤–Ω–∏":
        return None

    try:
        conn = await asyncpg.connect(**DB)
        row = await conn.fetchrow(
            "SELECT level_id FROM study_levels WHERE LOWER(level_word) = $1",
            level_name.lower()
        )
        await conn.close()
        return row["level_id"] if row else None
    except Exception as e:
        print(f"[ERROR] get_level_id_word failed: {e}")
        return None
