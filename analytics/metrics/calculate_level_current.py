
# üß† –ú–∞—Ç—Ä–∏—Ü–∞ –ø—Ä–∏—Å–≤–æ–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è (level_id_client) —Å–æ–≥–ª–∞—Å–Ω–æ CEFR:
# 1 ‚Äî A1: >= 50% —Å–ª–æ–≤ —É—Ä–æ–≤–Ω—è A1 —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º 100%
# 2 ‚Äî A2: >= 100% —Å–ª–æ–≤ —É—Ä–æ–≤–Ω—è A1 —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º 100%
# 3 ‚Äî B1: >= 50% —Å–ª–æ–≤ —É—Ä–æ–≤–Ω—è B —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º 100%
# 4 ‚Äî B2: >= 100% —Å–ª–æ–≤ —É—Ä–æ–≤–Ω—è B —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º 100%
# 5 ‚Äî C1: >= 50% —Å–ª–æ–≤ —É—Ä–æ–≤–Ω—è C —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º 100%
# 6 ‚Äî C2: >= 100% —Å–ª–æ–≤ —É—Ä–æ–≤–Ω—è C —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º 100%
#
# –í–∞–∂–Ω–æ: —É—Ä–æ–≤–µ–Ω—å –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–æ–π–¥–µ–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ —Å quiz_weight != NULL

# –ü—Ä–∏–º–µ—Ä –ª–æ–≥–∏–∫–∏ (–≤ —É–ø—Ä–æ—â—ë–Ω–Ω–æ–π —Ñ–æ—Ä–º–µ, —Ä–µ–∞–ª–∏–∑—É–µ—Ç—Å—è –≤ –∫–æ–¥–µ –Ω–∏–∂–µ):
# SELECT COUNT(*) FROM esp2rus_dictionary WHERE lev_id = 1;
# SELECT COUNT(*) FROM client_activity_words JOIN ... WHERE lev_id = 1 AND score = 1.0;


from asyncpg import Connection
from datetime import datetime

LEVEL_THRESHOLD_COVERAGE = 0.8  # ‚â• 80% —Å–ª–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ
LEVEL_THRESHOLD_SCORE = 0.8     # ‚â• 80% —Ç–æ—á–Ω–æ—Å—Ç—å

async def update_level_current(conn: Connection, client_id: int) -> None:
    # –®–∞–≥ 1: –ø–æ–ª—É—á–∞–µ–º –æ—Ö–≤–∞—Ç –∏ —Ç–æ—á–Ω–æ—Å—Ç—å –ø–æ –∫–∞–∂–¥–æ–º—É —É—Ä–æ–≤–Ω—é –∫–ª–∏–µ–Ω—Ç–∞
    query = """
        SELECT
            level_id_word,
            COUNT(*) AS quizzes_passed,
            SUM(score_quiz * quiz_weight) / NULLIF(SUM(quiz_weight), 0) AS avg_score
        FROM client_activity_log
        WHERE client_id = $1
        GROUP BY level_id_word
    """
    level_stats = await conn.fetch(query, client_id)

    if not level_stats:
        print(f"[LEVEL] –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞ {client_id}")
        return

    # –®–∞–≥ 2: –ø–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –ø–æ —É—Ä–æ–≤–Ω—è–º
    dictionary_totals = await conn.fetch("""
        SELECT lev_id, COUNT(*) AS total_words
        FROM esp2rus_dictionary
        WHERE lev_id IS NOT NULL
        GROUP BY lev_id
    """)

    total_words_map = {row["lev_id"]: row["total_words"] for row in dictionary_totals}

    # –®–∞–≥ 3: –∏—â–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å, –≥–¥–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –æ–±–∞ —É—Å–ª–æ–≤–∏—è
    qualified_levels = []

    for stat in level_stats:
        level_id = stat["level_id_word"]
        passed = stat["quizzes_passed"]
        avg_score = float(stat["avg_score"] or 0.0)
        total = total_words_map.get(level_id, 0)

        if total == 0:
            continue

        coverage_ratio = passed / total

        if coverage_ratio >= LEVEL_THRESHOLD_COVERAGE and avg_score >= LEVEL_THRESHOLD_SCORE:
            qualified_levels.append(level_id)

    if not qualified_levels:
        print(f"[LEVEL] –£ –∫–ª–∏–µ–Ω—Ç–∞ {client_id} –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π")
        return

    new_level_id = max(qualified_levels)

    # –®–∞–≥ 4: –æ–±–Ω–æ–≤–∏–º client_analytics
    await conn.execute(
        """
        UPDATE client_analytics
        SET level_id_current = $1,
            date_level_upgraded = $2
        WHERE client_id = $3
        """,
        new_level_id,
        datetime.utcnow(),
        client_id
    )

    print(f"[LEVEL] –ö–ª–∏–µ–Ω—Ç {client_id} –¥–æ—Å—Ç–∏–≥ —É—Ä–æ–≤–Ω—è {new_level_id}")
