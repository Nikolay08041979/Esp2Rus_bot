# üìê calculate_level_current.py ‚Äî –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–∏—Å–≤–æ–µ–Ω–∏—è CEFR —É—Ä–æ–≤–Ω—è

import asyncpg

# üìå –†–∞—Å—á—ë—Ç —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è –≤–ª–∞–¥–µ–Ω–∏—è —è–∑—ã–∫–æ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
# –ü—Ä–æ–≥—Ä–µ—Å—Å (coverage) —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø–æ —Ç–∞–±–ª–∏—Ü–µ learned_words / dictionary
# –£—Ä–æ–≤–µ–Ω—å –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç—Å—è, –µ—Å–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ª–æ–≤–∏—è –∏–∑ level_matrix –ø–æ coverage
# –¢–æ—á–Ω–æ—Å—Ç—å (accuracy) –±–æ–ª—å—à–µ –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è (–∏—Å–∫–ª—é—á–µ–Ω–∞ –ø–æ —Ä–µ—à–µ–Ω–∏—é –æ—Ç 2025-05-14)

async def calculate_level_current(conn: asyncpg.Connection, client_id: int) -> int | None:
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—Ä–æ–≤–Ω–µ–π –∏–∑ –º–∞—Ç—Ä–∏—Ü—ã
    rows = await conn.fetch("""
        SELECT level_id_client, lev_id, min_coverage
        FROM level_matrix
        ORDER BY level_id_client
    """)

    level_id_current = None

    for row in rows:
        level_id = row["level_id_client"]
        lev_id = row["lev_id"]
        min_coverage = row["min_coverage"]

        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ —á–∏—Å–ª–æ —Å–ª–æ–≤ –∏ –≤—ã—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ –ø–æ —ç—Ç–æ–º—É —É—Ä–æ–≤–Ω—é
        stats = await conn.fetchrow("""
            SELECT
                COUNT(*) AS total,
                COUNT(lw.word_id) AS learned
            FROM dictionary d
            LEFT JOIN learned_words lw ON lw.word_id = d.word_id AND lw.client_id = $1
            WHERE d.lev_id = $2
        """, client_id, lev_id)

        total = stats["total"] or 0
        learned = stats["learned"] or 0

        if total == 0:
            continue

        coverage = round((learned / total) * 100, 2)

        print(f"[DEBUG] –ö–ª–∏–µ–Ω—Ç {client_id}: lev_id={lev_id}, coverage={coverage:.2f}%", end=" ")

        if coverage >= min_coverage:
            level_id_current = level_id
            print(
                f"[DEBUG] –ö–ª–∏–µ–Ω—Ç {client_id}: lev_id={lev_id}, coverage={coverage:.2f}% ‚úÖ –ø—Ä–∏—Å–≤–æ–µ–Ω —É—Ä–æ–≤–µ–Ω—å level_id={level_id}")
        else:
            print(
                f"[DEBUG] –ö–ª–∏–µ–Ω—Ç {client_id}: lev_id={lev_id}, coverage={coverage:.2f}% ‚ùå –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è —É—Ä–æ–≤–Ω—è level_id={level_id}")

    # –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –≤ client_analytics
    await conn.execute("""
        UPDATE client_analytics
        SET level_id_current = $2
        WHERE client_id = $1
    """, client_id, level_id_current)

    if level_id_current:
        return level_id_current
    else:
        print(f"[DEBUG] –ö–ª–∏–µ–Ω—Ç client_id={client_id}: —É—Ä–æ–≤–µ–Ω—å –Ω–µ –ø—Ä–∏—Å–≤–æ–µ–Ω. –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å = 0")
        return None
