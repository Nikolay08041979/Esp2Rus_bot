# üìê analytics/metrics/calculate_quiz_weight.py

"""
–ú–æ–¥—É–ª—å —Ä–∞—Å—á—ë—Ç–∞ quiz_weight:
1. calculate_quiz_weight(...) ‚Äî —á–∏—Å—Ç–∞—è —Ñ–æ—Ä–º—É–ª–∞
2. calculate_quiz_weight_with_fetch(...) ‚Äî –¥–æ—Å—Ç–∞—ë—Ç –≤–µ—Å–∞ –∏–∑ view_word_weight –∏ –≤—ã–∑—ã–≤–∞–µ—Ç —Ä–∞—Å—á—ë—Ç
3. calculate_quiz_weight_by_level(...) ‚Äî –¥–æ—Å—Ç–∞—ë—Ç –≤–µ—Å –ø–æ level_id_word –∏–∑ view_quiz_weight_by_group –∏ —É–º–Ω–æ–∂–∞–µ—Ç –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Å–ª–æ–≤
"""

from typing import Optional
import asyncpg

# üí° –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: –≤–µ—Å –æ–¥–Ω–æ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å–ª–æ–≤–∞
WORD_CORRECT_VALUE = 0.1


# 1Ô∏è‚É£ –ß–∏—Å—Ç–∞—è —Ñ–æ—Ä–º—É–ª–∞
def calculate_quiz_weight(word_srcs: list[str], score_quiz: float, word_weights: dict[str, float]) -> Optional[float]:
    if score_quiz < 1.0:
        return None

    unique_words = set(word_srcs)
    weights = [word_weights.get(word, 1.0) for word in unique_words]

    if not weights:
        return None

    result = round(sum(weights) / len(weights), 2)
    return result


# 2Ô∏è‚É£ –í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –≤–µ—Å–∞ –ø–æ —Å–ª–æ–≤–∞–º
async def calculate_quiz_weight_with_fetch(conn: asyncpg.Connection, word_srcs: list[str], score_quiz: float) -> Optional[float]:
    if score_quiz < 1.0 or not word_srcs:
        return None

    rows = await conn.fetch(
        "SELECT word_src, weight_value FROM view_word_weight WHERE word_src = ANY($1)", word_srcs
    )
    word_weights = {row["word_src"]: float(row["weight_value"]) for row in rows}

    return calculate_quiz_weight(word_srcs, score_quiz, word_weights)


# 3Ô∏è‚É£ –†–∞—Å—á—ë—Ç –≤–µ—Å–∞ –ø–æ —É—Ä–æ–≤–Ω—é + –º–Ω–æ–∂–∏—Ç–µ–ª—å –∑–∞ –∫–æ–ª-–≤–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Å–ª–æ–≤
async def calculate_quiz_weight_by_level(conn: asyncpg.Connection, lev_id: int, score_quiz: float, words_correct_quiz: int) -> Optional[float]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç quiz_weight = –±–∞–∑–æ–≤—ã–π –≤–µ—Å * (words_correct_quiz * WORD_CORRECT_VALUE), –µ—Å–ª–∏ quiz –ø—Ä–æ–π–¥–µ–Ω –Ω–∞ 100%
    """
    if score_quiz < 1.0:
        return None

    try:
        row = await conn.fetchrow(
            "SELECT weight_value FROM view_quiz_weight_by_group WHERE lev_id = $1",
            lev_id
        )
        if not row:
            return None

        base_weight = float(row["weight_value"])
        multiplier = words_correct_quiz * WORD_CORRECT_VALUE
        quiz_weight = round(base_weight * multiplier, 2)

        return quiz_weight

    except Exception as e:
        print(f"[ERROR] calculate_quiz_weight_by_level failed: {e}")
        return None