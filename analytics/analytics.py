"""
Orchestration Layer:
- –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑—É–µ—Ç –≤—ã–∑–æ–≤—ã save_client_activity_log –∏ save_client_analytics
- –°–æ–¥–µ—Ä–∂–∏—Ç –≤—Å—é –æ—Ç–ª–∞–¥–æ—á–Ω—É—é, –ª–æ–≥–∏—Ä—É—é—â—É—é –∏ —Ç–µ—Å—Ç–æ–≤—É—é –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É
- –Ø–≤–ª—è–µ—Ç—Å—è –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–æ—á–∫–æ–π –≤—Ö–æ–¥–∞ –Ω–∞ —ç—Ç–∞–ø–µ staging –∏ –ø—Ä–æ–¥–∞–∫—à–Ω–∞
"""
# üìÇ analytics.py ‚Äî orchestration layer

import asyncpg
from core.config import DB, LOGS_DIR, USE_ANALYTICS_V2
import asyncio
from datetime import datetime
import logging
import json
import os

from analytics.save_client_activity_log import save_activity
from analytics.save_client_analytics import save_client_analytics
from analytics.metrics.refresh_user_progress_by_theme import refresh_user_progress

logging.basicConfig(level=logging.DEBUG)

async def log_client_activity(time_start, time_finish, data: dict):
    logging.debug("üß© –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω")
    logging.debug("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ data: %s", json.dumps(data, indent=4, default=str))

    if not USE_ANALYTICS_V2:
        logging.warning("‚ö†Ô∏è –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π —Å—Ç–µ–∫ V2 –æ—Ç–∫–ª—é—á—ë–Ω. –í—ã—Ö–æ–¥.")
        return

    try:
        # üìù –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–∞
        await save_activity(data)

        # üîÅ –ò–∑–≤–ª–µ–∫–∞–µ–º client_id –ø–æ tg_id
        client_id = await extract_client_id(data["tg_id"])
        if client_id is None:
            logging.warning(f"‚ö†Ô∏è client_id –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è tg_id={data['tg_id']}")
            return

        # client_id = await extract_client_id(data["tg_id"])

        # üß† –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–≥—Ä–µ–≥–∞—Ç—ã
        logging.debug(f"[DEBUG] save_client_analytics() –¥–ª—è client_id={client_id}")
        client_rating = await save_client_analytics(client_id)

        # üîÅ –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ç–µ–º–∞–º –∏ —É—Ä–æ–≤–Ω—è–º
        conn = await asyncpg.connect(**DB)
        await refresh_user_progress(conn)
        await conn.close()

        # ‚úÖ –ª–æ–≥ –≤ —Ñ–∞–π–ª
        log_dir = f"{LOGS_DIR}/analytics_debug"
        os.makedirs(log_dir, exist_ok=True)
        log_path = os.path.join(log_dir, "quiz_weight_v2.log")
        with open(log_path, "a") as f:
            f.write(f"{datetime.now()}: client_id={client_id}, quiz_weight={data.get('quiz_weight')}, client_rating={client_rating}\n")

        # ‚úÖ –ª–æ–≥ –≤ cron_events
        await log_cron_event("save_client_analytics", "success", f"client_id={client_id}, rating={client_rating}")
        logging.info(f"[OK] –î–∞–Ω–Ω—ã–µ –ø–æ –∫–ª–∏–µ–Ω—Ç—É {client_id} –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∏ –∑–∞–ø–∏—Å–∞–Ω—ã.")

    except Exception as e:
        await log_cron_event("save_client_analytics", "failed", str(e))
        logging.error(f"[‚ùå ERROR] –û—à–∏–±–∫–∞ –≤ orchestration: {e}")


async def extract_client_id(tg_id: int) -> int | None:
    conn = await asyncpg.connect(**DB)
    row = await conn.fetchrow("SELECT client_id FROM client_info WHERE tg_id = $1", tg_id)
    await conn.close()
    return row["client_id"] if row else None

# async def extract_client_id(tg_id: int) -> int:
#     conn = await asyncpg.connect(**DB)
#     row = await conn.fetchrow("SELECT client_id FROM client_info WHERE tg_id = $1", tg_id)
#     await conn.close()
#     return row["client_id"] if row else -1


async def log_cron_event(task_name: str, status: str, details: str = ""):
    try:
        conn = await asyncpg.connect(**DB)
        await conn.execute(
            """
            INSERT INTO cron_events (task_name, status, timestamp, details)
            VALUES ($1, $2, $3, $4)
            """,
            task_name, status, datetime.now(), details
        )
        await conn.close()
    except Exception as e:
        print(f"[CRON_LOG ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ: {e}")
