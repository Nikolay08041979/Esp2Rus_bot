import asyncio
import logging
import os
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import BotCommand

from bot.handlers.user_handlers import router as user_router
from bot.handlers.admin_handlers import router as admin_router

# ‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# ‚úÖ –í—ã–±–æ—Ä —Ç–æ–∫–µ–Ω–∞ –ø–æ ENV_MODE
env = os.getenv("ENV_MODE", "dev")
token = os.getenv("BOT_TOKEN_PROD") if env == "prod" else os.getenv("BOT_TOKEN_DEV")

# ‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - [%(levelname)s] - %(name)s - %(message)s"
)
logger = logging.getLogger(__name__)
logger.info(f"–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ: {env}")

async def main():
    bot = Bot(token=token, default=DefaultBotProperties(parse_mode="HTML"))
    dp = Dispatcher(storage=MemoryStorage())

    dp.include_router(user_router)
    dp.include_router(admin_router)

    await bot.set_my_commands([
        BotCommand(command="start", description="–ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É"),
        BotCommand(command="cancel", description="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é"),
        BotCommand(command="help", description="–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É")
    ])

    logger.info("ü§ñ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –ø—Ä–∏—ë–º—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π.")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())