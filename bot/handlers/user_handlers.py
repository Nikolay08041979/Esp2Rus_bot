from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from bot.keyboards import category_keyboard, level_keyboard, answer_keyboard, start_over_keyboard
from bot.states import QuizState
from db.models import get_all_categories, get_all_levels, get_words_for_quiz, get_all_words
from random import shuffle

import logging
logger = logging.getLogger(__name__)

router = Router()

@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    categories = await get_all_categories()
    keyboard = category_keyboard(categories)
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–ª–æ–≤:", reply_markup=keyboard)

@router.callback_query(F.data.startswith("cat:"))
async def category_selected(callback: CallbackQuery, state: FSMContext):
    category = callback.data.split("cat:")[1]
    await state.update_data(category=category)
    logger.info(f"[FSM] –ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤—ã–±—Ä–∞–Ω–∞: {category}")

    levels = await get_all_levels()
    await callback.message.answer(
        f"üìö –í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category}\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:",
        reply_markup=level_keyboard(levels)
    )

    await state.set_state(QuizState.LevelSelected)
    logger.info("[FSM] –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞: LevelSelected")

@router.message(StateFilter(QuizState.LevelSelected))
async def level_selected(message: Message, state: FSMContext):
    level = message.text.lower().strip()
    data = await state.get_data()
    category = data.get("category")

    if not category:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ /start")
        return

    valid_levels = await get_all_levels()
    valid_level_names = [l.lower() for l in valid_levels]

    if level != "–≤—Å–µ —É—Ä–æ–≤–Ω–∏" and level not in valid_level_names:
        await message.answer(
            "‚ö†Ô∏è –£—Ä–æ–≤–µ–Ω—å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.\n"
            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Ä–æ–≤–Ω–∏: {', '.join(valid_levels)}"
        )
        return

    await state.update_data(level=level)
    await state.set_state(QuizState.AwaitingWordCount)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–ª–æ–≤–∞ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —É—Ä–æ–≤–Ω—é
    all_words = await get_all_words()
    filtered_words = [
        w for w in all_words
        if w['category'].lower() == category.lower() and (
                level == "–≤—Å–µ —É—Ä–æ–≤–Ω–∏" or (w['level'] and w['level'].lower() == level)
        )
    ]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if not filtered_words:
        await message.answer("‚ö†Ô∏è –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —É—Ä–æ–≤–Ω–µ –Ω–µ—Ç —Å–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ —É—Ä–æ–≤–µ–Ω—å.")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–ª–æ–≤
    await message.answer(
        f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏:\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n–£—Ä–æ–≤–µ–Ω—å: {level}\n–í—Å–µ–≥–æ —Å–ª–æ–≤: {len(filtered_words)}\n\n"
        "–°–∫–æ–ª—å–∫–æ —Å–ª–æ–≤ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ –≤ —ç—Ç–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ? (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5, 10, 15)"
    )



    # await message.answer(
    #     f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏:\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n–£—Ä–æ–≤–µ–Ω—å: {level}\n\n"
    #     "–°–∫–æ–ª—å–∫–æ —Å–ª–æ–≤ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ –≤ —ç—Ç–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ? (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5, 10, 15)"
    # )

@router.message(StateFilter(QuizState.AwaitingWordCount))
async def word_count_selected(message: Message, state: FSMContext):
    try:
        count = int(message.text.strip())
        if count <= 0 or count > 20:
            raise ValueError
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 20.")
        return

    data = await state.get_data()
    category = data.get("category")
    level = data.get("level")

    await start_quiz(message, category, level, count, state)

async def start_quiz(message: Message, category: str, level: str | None, limit: int, state: FSMContext):
    words = await get_words_for_quiz(category, level, limit)
    if not words:
        await message.answer("‚ùå –ù–µ—Ç —Å–ª–æ–≤ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —É—Ä–æ–≤–Ω—é.")
        return

    await message.answer("‚úÖ –ù–∞—á–∏–Ω–∞–µ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—É!")

    await state.set_state(QuizState.in_quiz)
    await state.update_data(words=words, score=0, index=0)

    current_word = words[0]
    question = current_word["word_esp"]

    options = [
        current_word["word_rus"],
        current_word.get("other_rus1"),
        current_word.get("other_rus2"),
        current_word.get("other_rus3"),
    ]
    options = [opt for opt in options if opt]
    shuffle(options)

    await message.answer(
        f"–ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è: {question}?",
        reply_markup=answer_keyboard(options)
    )

@router.message(StateFilter(QuizState.in_quiz))
async def process_quiz_answer(message: Message, state: FSMContext):
    data = await state.get_data()
    words = data.get("words", [])
    score = data.get("score", 0)
    index = data.get("index", 0)

    if index >= len(words):
        await message.answer(
            f"üèÅ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –∏–∑ {len(words)}.\n\n"
            "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É, –Ω–∞–∂–º–∏—Ç–µ /start.",
            reply_markup=start_over_keyboard
        )
        await state.clear()
        return

    current_word = words[index]
    correct_answer = current_word["word_rus"]
    user_answer = message.text.strip().lower()

    if user_answer == correct_answer.lower():
        score += 1
        await message.answer("‚úÖ –í–µ—Ä–Ω–æ!")
    else:
        await message.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}")

    index += 1

    if index >= len(words):
        await message.answer(
            f"üèÅ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –∏–∑ {len(words)}.\n\n"
            "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É, –Ω–∞–∂–º–∏—Ç–µ /start.",
            reply_markup=start_over_keyboard
        )
        await state.clear()
        return

    next_word = words[index]
    question = next_word["word_esp"]

    options = [
        next_word["word_rus"],
        next_word.get("other_rus1"),
        next_word.get("other_rus2"),
        next_word.get("other_rus3"),
    ]
    options = [opt for opt in options if opt]
    shuffle(options)

    await state.update_data(index=index, score=score)
    await message.answer(
        f"–ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è: {question}?",
        reply_markup=answer_keyboard(options)
    )

@router.message(Command("cancel"))
async def cancel_command(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–∞—á–∞–ª–æ ‚§µÔ∏è")
    await cmd_start(message, state)