import pprint
from datetime import datetime
from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from bot.keyboards import category_keyboard, level_keyboard, answer_keyboard, start_over_keyboard
from bot.states import QuizState
from db.models import get_all_categories, get_all_levels, get_words_for_quiz, get_all_words, get_personalized_words
from random import shuffle
import logging
from analytics.analytics import log_client_activity
from analytics.metrics.get_level_id_word import get_level_id_word
from db.utils.client_lifecycle import ensure_client_registered
from analytics.reports.user_report import generate_user_report




logger = logging.getLogger(__name__)
router = Router()


# üîÅ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —ç–∫—Ä–∞–Ω
async def show_start_menu(message: Message, state: FSMContext):
    await state.clear()
    categories = await get_all_categories()
    keyboard = category_keyboard(categories)
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–ª–æ–≤:", reply_markup=keyboard)


@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    await ensure_client_registered(message.from_user)
    await show_start_menu(message, state)


@router.message(Command("cancel"), flags={"allow_fsm": True})
async def cancel_command(message: Message, state: FSMContext):
    await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–∞—á–∞–ª–æ ‚§µÔ∏è")
    await show_start_menu(message, state)

@router.message(Command("report"))
async def handle_user_report(message: Message):
    report = await generate_user_report(message.from_user.id)
    await message.answer(report)


@router.callback_query(F.data.startswith("cat:"))
async def category_selected(callback: CallbackQuery, state: FSMContext):
    category = callback.data.split("cat:")[1]
    await state.update_data(category=category)
    logger.info(f"[FSM] –ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤—ã–±—Ä–∞–Ω–∞: {category}")

    levels = await get_all_levels()
    await callback.message.answer(
        f"üìö –í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category}\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:",
        reply_markup=level_keyboard(levels)
    )

    await state.set_state(QuizState.LevelSelected)
    logger.info("[FSM] –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞: LevelSelected")


@router.message(StateFilter(QuizState.LevelSelected))
async def level_selected(message: Message, state: FSMContext):
    level = message.text.lower().strip()
    if level == "–≤—Å–µ —É—Ä–æ–≤–Ω–∏":
        level = None  # –∏—Å–ø–æ–ª—å–∑—É–µ–º None –¥–ª—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≤ SQL –∏ Python

    data = await state.get_data()
    category = data.get("category")

    if not category:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ /start")
        return

    valid_levels = await get_all_levels()
    valid_level_names = [l.lower() for l in valid_levels]

    if level is not None and level not in valid_level_names:
        await message.answer(
            "‚ö†Ô∏è –£—Ä–æ–≤–µ–Ω—å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.\n"
            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Ä–æ–≤–Ω–∏: {', '.join(valid_levels)}"
        )
        return

    await state.update_data(level=level)
    await state.set_state(QuizState.AwaitingWordCount)

    all_words = await get_all_words()
    filtered_words = [
        w for w in all_words
        if w['category'].lower() == category.lower() and (
            level is None or (w['level'] and w['level'].lower() == level)
        )
    ]

    if not filtered_words:
        await message.answer("‚ö†Ô∏è –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —É—Ä–æ–≤–Ω–µ –Ω–µ—Ç —Å–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ —É—Ä–æ–≤–µ–Ω—å.")
        return

    # —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ —É—Ä–æ–≤–Ω—è
    level_display = "–≤—Å–µ —É—Ä–æ–≤–Ω–∏" if level is None else level

    await message.answer(
        f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏:\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n–£—Ä–æ–≤–µ–Ω—å: {level_display}\n–í—Å–µ–≥–æ —Å–ª–æ–≤: {len(filtered_words)}\n\n"
        "–°–∫–æ–ª—å–∫–æ —Å–ª–æ–≤ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ –≤ —ç—Ç–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ? (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5, 10, 15)"
    )


@router.message(StateFilter(QuizState.AwaitingWordCount))
async def word_count_selected(message: Message, state: FSMContext):
    try:
        count = int(message.text.strip())
        if count <= 0 or count > 20:
            raise ValueError
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 20.")
        return

    data = await state.get_data()
    category = data.get("category")
    level = data.get("level")

   # await start_quiz(message, category, level, count, state)
    words = await get_personalized_words(message.from_user.id, category, level, count)

    print(f"[DEBUG word_count_selected] words returned: {len(words)}")

    if not words:
        level_display = "–≤—Å–µ —É—Ä–æ–≤–Ω–∏" if level is None else level
        if level_display == "–≤—Å–µ —É—Ä–æ–≤–Ω–∏":
            await message.answer(f"‚úÖ –í—ã –∏–∑—É—á–∏–ª–∏ –≤—Å–µ —Å–ª–æ–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>{category}</b>. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é.",
                                 parse_mode="HTML")
        else:
            await message.answer(
                f"‚úÖ –í—ã –∏–∑—É—á–∏–ª–∏ –≤—Å–µ —Å–ª–æ–≤–∞ —É—Ä–æ–≤–Ω—è <b>{level_display}</b>. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —É—Ä–æ–≤–µ–Ω—å –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é.",
                parse_mode="HTML")
        return

    if len(words) < count:
        await message.answer(
            f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ —Ç–æ–ª—å–∫–æ {len(words)} —Å–ª–æ–≤ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º. "
            "–ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É —Å –Ω–∏–º–∏."
        )

    await start_quiz(message, words, state)

async def start_quiz(message: Message, words: list[dict], state: FSMContext):

    print(f"[DEBUG word_count_selected] words returned: {len(words)}")
    data = await state.get_data()
    category = data.get("category")
    level = data.get("level")
    level_display = "–≤—Å–µ —É—Ä–æ–≤–Ω–∏" if level is None else level

    if not words:
        if level_display == "–≤—Å–µ —É—Ä–æ–≤–Ω–∏":
            await message.answer(f"‚úÖ –í—ã –∏–∑—É—á–∏–ª–∏ –≤—Å–µ —Å–ª–æ–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>{category}</b>. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é.",
                                 parse_mode="HTML")
        else:
            await message.answer(
                f"‚úÖ –í—ã –∏–∑—É—á–∏–ª–∏ –≤—Å–µ —Å–ª–æ–≤–∞ —É—Ä–æ–≤–Ω—è <b>{level_display}</b>. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —É—Ä–æ–≤–µ–Ω—å –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é.",
                parse_mode="HTML")
        return

    await message.answer("‚úÖ –ù–∞—á–∏–Ω–∞–µ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—É!")

    await state.set_state(QuizState.in_quiz)

    await state.update_data(words=words, score=0, index=0, time_start=datetime.now().time())

    current_word = words[0]
    question = current_word["word_src"]

    options = [
        current_word["word_rus"],
        current_word.get("other_rus1"),
        current_word.get("other_rus2"),
        current_word.get("other_rus3"),
    ]
    options = [opt for opt in options if opt]
    shuffle(options)

    await message.answer(
        f"–ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è: {question}?",
        reply_markup=answer_keyboard(options)
    )


@router.message(StateFilter(QuizState.in_quiz))
async def process_quiz_answer(message: Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –∏–∑ FSM
    data = await state.get_data()
    words = data.get("words", [])
    score = data.get("score", 0)
    index = data.get("index", 0)
    level = data.get("level", "–≤—Å–µ —É—Ä–æ–≤–Ω–∏")
    pprint.pp(data)

    logger.info(f"[QUIZ] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: index={index}, len(words)={len(words)}")
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã (>= ‚Äî –∑–∞—â–∏—Ç–∞ –æ—Ç —Å–±–æ–µ–≤/–ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞)
    if index >= len(words):
        logger.warning(f"[QUIZ] Index {index} >= len(words)={len(words)} ‚Äî –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø–æ–≤—Ç–æ—Ä.")
        result_text = (
            f"–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {int(100 * (score / len(words)))}% \n"
            f"({score} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –∏–∑ {len(words)}).\n\n"
        )
        result_text += "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!" if score == len(words) else "üéØ –¢—ã –ø–æ—á—Ç–∏ —É —Ü–µ–ª–∏!"

        result_text += "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É, –Ω–∞–∂–º–∏—Ç–µ /start."

        await message.answer(result_text, reply_markup=start_over_keyboard)

        # –ó–∞—â–∏—Ç–∞: –µ—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å –Ω–µ —É–∫–∞–∑–∞–Ω, —Ç—Ä–∞–∫—Ç—É–µ–º –∫–∞–∫ "–≤—Å–µ —É—Ä–æ–≤–Ω–∏"
        level_display = "–≤—Å–µ —É—Ä–æ–≤–Ω–∏" if level is None else level

        level_id_word = await get_level_id_word(level_display)

        score_quiz = round(score / len(words), 2)

        time_finish = datetime.now().time()  # –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è
        time_start = data.get("time_start", time_finish)  # —Å—Ç–∞—Ä—Ç —É–∂–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ FSM

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ë–î
        await log_client_activity(time_start, time_finish,{
            "tg_id": message.from_user.id,
            "username": message.from_user.username,
            "first_name": message.from_user.first_name,
            "last_name": message.from_user.last_name,
            "language_code": message.from_user.language_code,
            "score_quiz": score_quiz,
            "words_correct_quiz": int(score),
            "words_incorrect_quiz": len(words) - int(score),
            "level_id_word": level_id_word,
            "words": words
        })

        await state.clear()
        return

    current_word = words[index]
    correct_answer = current_word["word_rus"]
    user_answer = message.text.strip().lower()

    if user_answer == correct_answer.lower():
        score += 1
        await message.answer("‚úÖ –í–µ—Ä–Ω–æ!")
    else:
        await message.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}")

    index += 1
    await state.update_data(index=index, score=score)

    next_word = words[index] if index < len(words) else None

    if next_word:
        options = [
            next_word["word_rus"],
            next_word.get("other_rus1"),
            next_word.get("other_rus2"),
            next_word.get("other_rus3"),
        ]
        options = [opt for opt in options if opt]
        shuffle(options)

        await message.answer(
            f"–ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è: {next_word['word_src']}?",
            reply_markup=answer_keyboard(options)
        )
    else:
        logger.info(f"[QUIZ] –ó–∞–≤–µ—Ä—à–∞–µ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—É —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞. index={index}")
        return await process_quiz_answer(message, state)

