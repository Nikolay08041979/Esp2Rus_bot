from aiogram import Router, types, F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import random

from db.models import get_all_categories, get_all_levels, get_words_for_quiz
from bot.keyboards import category_keyboard, level_keyboard, quiz_options_keyboard, start_over_keyboard

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
class QuizState(StatesGroup):
    choosing_category = State()
    choosing_level = State()
    choosing_quantity = State()
    quiz_in_progress = State()

router = Router()

@router.message(CommandStart())
async def cmd_start(message: types.Message, state: FSMContext):
    categories = await get_all_categories()
    await state.update_data(categories=categories)
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! üëã\n–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤—ã—É—á–∏—Ç—å –∏—Å–ø–∞–Ω—Å–∫–∏–µ —Å–ª–æ–≤–∞.\n\n–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=category_keyboard(categories)
    )
    await state.set_state(QuizState.choosing_category)

@router.message(QuizState.choosing_category)
async def choose_category(message: types.Message, state: FSMContext):
    data = await state.get_data()
    if message.text not in data['categories']:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return
    await state.update_data(category=message.text)
    levels = await get_all_levels()
    await state.update_data(levels=levels)
    await message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:",
        reply_markup=level_keyboard(levels)
    )
    await state.set_state(QuizState.choosing_level)

@router.message(QuizState.choosing_level)
async def choose_level(message: types.Message, state: FSMContext):
    data = await state.get_data()
    if message.text not in data['levels'] and message.text.lower() != "–≤—Å–µ —É—Ä–æ–≤–Ω–∏":
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return
    await state.update_data(level=message.text if message.text != "–≤—Å–µ —É—Ä–æ–≤–Ω–∏" else None)
    await message.answer(
        "–°–∫–æ–ª—å–∫–æ —Å–ª–æ–≤ —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–æ–π—Ç–∏? (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5, 10, 15)",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.set_state(QuizState.choosing_quantity)

@router.message(QuizState.choosing_quantity)
async def choose_quantity(message: types.Message, state: FSMContext):
    try:
        count = int(message.text)
        if count < 1 or count > 20:
            raise ValueError()
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 20.")
        return

    await state.update_data(quantity=count)
    data = await state.get_data()

    await message.answer(
        f"–ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É!\n\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data['category']}\n–£—Ä–æ–≤–µ–Ω—å: {data['level'] or '–≤—Å–µ —É—Ä–æ–≤–Ω–∏'}\n–°–ª–æ–≤: {data['quantity']}"
    )
    await state.set_state(QuizState.quiz_in_progress)

    words = await get_words_for_quiz(data['category'], data['level'], data['quantity'])
    if not words:
        await message.answer("–ù–µ—Ç —Å–ª–æ–≤ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ —É—Ä–æ–≤–µ–Ω—å.")
        await state.clear()
        return

    random.shuffle(words)
    await state.update_data(words=words, correct=0, total=0)

    first = words[0]
    options = [first['word_rus'], first['other_rus1'], first['other_rus2'], first['other_rus3']]
    random.shuffle(options)

    keyboard = quiz_options_keyboard(options)
    await message.answer(
        f"–ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è: *{first['word_esp']}*?",
        parse_mode="Markdown",
        reply_markup=keyboard
    )

@router.message(QuizState.quiz_in_progress)
async def handle_answer(message: types.Message, state: FSMContext):
    data = await state.get_data()
    total = data.get('total', 0)
    correct = data.get('correct', 0)
    words = data.get('words', [])

    current = words[total]
    right_answer = current['word_rus']

    if message.text.strip().lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await message.answer(f"‚ÑπÔ∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {right_answer}")
    elif message.text.strip().lower() == right_answer.strip().lower():
        correct += 1
        await message.answer("‚úÖ –í–µ—Ä–Ω–æ!")
    else:
        await message.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {right_answer}")

    total += 1
    if total >= len(words):
        percent = round(correct / total * 100)
        await message.answer(
            f"üèÅ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct} –∏–∑ {total} ({percent}%)",
            reply_markup=start_over_keyboard
        )
        await state.clear()
        return

    await state.update_data(total=total, correct=correct)

    next_word = words[total]
    options = [next_word['word_rus'], next_word['other_rus1'], next_word['other_rus2'], next_word['other_rus3']]
    random.shuffle(options)

    keyboard = quiz_options_keyboard(options)
    await message.answer(
        f"–ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è: *{next_word['word_esp']}*?",
        parse_mode="Markdown",
        reply_markup=keyboard
    )