# --- –ù–æ–≤—ã–π —Ñ–∞–π–ª: bot/handlers/admin_handlers.py ---
import logging
import os
from aiogram import Router, Bot, F
from aiogram.filters.command import Command
from aiogram.filters.state import StateFilter
from datetime import datetime
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile, BufferedInputFile
from core.config import ADMIN_IDS, DB
from core.file_utils import save_uploaded_csv, save_import_log
from db.models import (
    get_category_stats,
    get_level_stats,
    add_category,
    delete_category,
    add_level,
    delete_level,
    get_all_levels_text,
)
from db.importer import import_words_from_json
from core.converter import convert_csv_to_json
from bot.states.admin_states import AdminStates, AdminReportState
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove


from analytics.reports.generate_admin_report_csv import generate_admin_report_csv
from analytics.reports.generate_user_report import generate_user_report
from analytics.reports.generate_admin_day_report import generate_admin_day_report
from analytics.reports.generate_cron_log_report import generate_cron_log_report



router = Router()

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ ---
def admin_menu_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="admin_stats")],
            [InlineKeyboardButton(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—Ä–æ–≤–Ω—è–º", callback_data="admin_stats_levels")],
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="admin_add_category")],
            [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="admin_delete_category")],
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å", callback_data="admin_add_level")],
            [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å", callback_data="admin_delete_level")],
            [InlineKeyboardButton(text="üìÖ –û—Ç—á–µ—Ç–Ω–æ—Å—Ç—å", callback_data="admin/report")]
        ]
    )

# --- –ê–¥–º–∏–Ω—Å–∫–∏–π –≤—Ö–æ–¥ ---
@router.message(Command("admin"), StateFilter("*"))
async def admin_entry(message: Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    await state.clear()

    help_text = (
        "üîß –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!\n\n"
    )

    await message.answer(help_text, reply_markup=admin_menu_keyboard())



# --- –ü–µ—Ä–µ—Ö–æ–¥ –≤ –º–µ–Ω—é –æ—Ç—á—ë—Ç–Ω–æ—Å—Ç–∏ –ø–æ –Ω–∞–∂–∞—Ç–∏—é –Ω–∞ –∫–Ω–æ–ø–∫—É "üìÖ –û—Ç—á—ë—Ç–Ω–æ—Å—Ç—å" (—Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
@router.message(F.text.lower().contains("–æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å"), StateFilter("*"))
async def redirect_to_report_menu(message: Message, state: FSMContext):
    await state.clear()
    await start_admin_report_menu(message, state)


# --- –ö–æ–º–∞–Ω–¥–∞ /admin/report (–≤—Ö–æ–¥ –≤ FSM –º–µ–Ω—é)
@router.message(Command("admin/report"))
async def start_admin_report_menu(message: Message, state: FSMContext):
    print("‚úÖ –í–æ—à–ª–∏ –≤ admin/report")
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    await state.clear()
    keyboard = ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="üìÖ –û—Ç—á–µ—Ç –∑–∞ –¥–µ–Ω—å")],
        [KeyboardButton(text="üóìÔ∏è –û—Ç—á–µ—Ç –∑–∞ –º–µ—Å—è—Ü (CSV)")],
        [KeyboardButton(text="üë§ –û—Ç—á–µ—Ç –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")]
    ], resize_keyboard=True)

    await message.answer("üìä –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:", reply_markup=keyboard)
    await state.set_state(AdminReportState.choosing_mode)


# --- –ë–ª–æ–∫ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ –≤ FSM –º–µ–Ω—é
@router.message(AdminReportState.choosing_mode, Command("admin/report"))
async def block_if_busy(message: Message, state: FSMContext):
    await message.answer("‚ö†Ô∏è –í—ã —É–∂–µ –≤ –º–µ–Ω—é –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏. –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel.")

# --- –ö–Ω–æ–ø–∫–∞ inline admin_menu: "üìÖ –û—Ç—á–µ—Ç–Ω–æ—Å—Ç—å"
@router.callback_query(F.data == "admin/report")
async def handle_admin_report_callback(callback: CallbackQuery, state: FSMContext):
    keyboard = ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="üìÖ –û—Ç—á–µ—Ç –∑–∞ –¥–µ–Ω—å")],
        [KeyboardButton(text="üóìÔ∏è –û—Ç—á–µ—Ç –∑–∞ –º–µ—Å—è—Ü (CSV)")],
        [KeyboardButton(text="üë§ –û—Ç—á–µ—Ç –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")]
    ], resize_keyboard=True)

    await callback.message.answer("üìä –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:", reply_markup=keyboard)
    await state.set_state(AdminReportState.choosing_mode)


# --- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º ---
@router.callback_query(F.data == "admin_stats")
async def show_stats(callback: CallbackQuery):
    stats = await get_category_stats()
    lines = [f"{r['–∫–∞—Ç–µ–≥–æ—Ä–∏—è']}: {r['–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Å–ª–æ–≤']}" for r in stats]
    await callback.message.answer("üìä –ö–æ–ª-–≤–æ —Å–ª–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n\n" + "\n".join(lines))

# --- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—Ä–æ–≤–Ω—è–º ---
@router.callback_query(F.data == "admin_stats_levels")
async def show_level_stats(callback: CallbackQuery):
    stats = await get_level_stats()
    lines = [f"{r['—É—Ä–æ–≤–µ–Ω—å']}: {r['–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Å–ª–æ–≤']}" for r in stats]
    await callback.message.answer("üìà –ö–æ–ª-–≤–æ —Å–ª–æ–≤ –ø–æ —É—Ä–æ–≤–Ω—è–º:\n\n" + "\n".join(lines))

# --- –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é ---
@router.callback_query(F.data == "admin_add_category")
async def prompt_add_category(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
    await state.set_state(AdminStates.awaiting_new_category)

@router.message(AdminStates.awaiting_new_category)
async def receive_new_category(message: Message, state: FSMContext):
    result = await add_category(message.text)
    await message.answer(result)
    await state.clear()

# --- –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é ---
@router.callback_query(F.data == "admin_delete_category")
async def prompt_delete_category(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("üóë –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    await state.set_state(AdminStates.awaiting_delete_category)

@router.message(AdminStates.awaiting_delete_category)
async def receive_category_to_delete(message: Message, state: FSMContext):
    result = await delete_category(message.text)
    await message.answer(result)
    await state.clear()

# --- –î–æ–±–∞–≤–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å ---
@router.callback_query(F.data == "admin_add_level")
async def prompt_add_level(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è:")
    await state.set_state(AdminStates.awaiting_new_level)

@router.message(AdminStates.awaiting_new_level)
async def receive_new_level(message: Message, state: FSMContext):
    result = await add_level(message.text)
    await message.answer(result)
    await state.clear()

# --- –£–¥–∞–ª–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å ---
@router.callback_query(F.data == "admin_delete_level")
async def prompt_delete_level(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("üóë –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    await state.set_state(AdminStates.awaiting_delete_level)

@router.message(AdminStates.awaiting_delete_level)
async def receive_level_to_delete(message: Message, state: FSMContext):
    result = await delete_level(message.text)
    await message.answer(result)
    await state.clear()

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ CSV-—Ñ–∞–π–ª–æ–≤ ---
@router.message(F.document)
async def handle_csv_upload(message: Message, bot: Bot, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    if not message.document.file_name.endswith(".csv"):
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .csv")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    file = await bot.get_file(message.document.file_id)
    file_data = await bot.download_file(file.file_path)
    file_path = save_uploaded_csv(message.document.file_name, file_data.read())

    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è CSV ‚Üí JSON
    json_path = file_path + ".json"
    convert_csv_to_json(file_path, json_path)

    # –ò–º–ø–æ—Ä—Ç —Å–ª–æ–≤
    result = await import_words_from_json(json_path, DB)

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
    log_path = save_import_log(result)

    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    msg = (
        "‚úÖ **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:**\n\n"
        f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–ª–æ–≤: **{result['added']}**\n"
        f"‚ûñ –î—É–±–ª–∏–∫–∞—Ç—ã: **{len(result['duplicates'])}**\n"
        f"‚ö†Ô∏è –û—à–∏–±–∫–∏: **{len(result['errors'])}**\n\n"
        f"üìù –õ–æ–≥: `{log_path}`"
    )
    await message.answer(msg, parse_mode="Markdown")

@router.message(AdminReportState.choosing_mode, F.text.lower().contains("–æ—Ç—á–µ—Ç –∑–∞ –¥–µ–Ω—å"))
async def request_day_report(message: Message, state: FSMContext):
    logging.info("üü¢ –í—ã–∑–≤–∞–Ω —Ö–µ–Ω–¥–ª–µ—Ä request_day_report")
    await message.answer("üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ *–¥–¥.–º–º.–≥–≥–≥–≥*", parse_mode="Markdown")
    await state.set_state(AdminReportState.enter_date)

@router.message(AdminReportState.enter_date)
async def handle_admin_report_date(message: Message, state: FSMContext):
    try:
        report_date = datetime.strptime(message.text.strip(), "%d.%m.%Y").date()
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: *12.05.2025*", parse_mode="Markdown")
        return

    try:
        report = await generate_admin_day_report(report_date)
        await message.answer(report)
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
    await state.clear()

@router.message(AdminReportState.choosing_mode, F.text.lower().contains("–æ—Ç—á–µ—Ç –∑–∞ –º–µ—Å—è—Ü"))
async def generate_month_csv(message: Message, state: FSMContext):
    path = await generate_admin_report_csv(days=30)
    if os.path.exists(path):
        doc = FSInputFile(path)  # ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±–µ—Ä–Ω—É–ª–∏ –ø—É—Ç—å –≤ FSInputFile
        await message.answer_document(doc, caption="üì¶ –æ—Ç—á–µ—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü")
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç.")
    await state.clear()


@router.message(AdminReportState.choosing_mode, F.text.lower().contains("–æ—Ç—á–µ—Ç –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"))
async def request_user_id(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ Telegram ID –∏–ª–∏ username (–Ω–∞–ø—Ä–∏–º–µ—Ä, 123456 –∏–ª–∏ @user):")
    await state.set_state(AdminReportState.enter_user)

@router.message(AdminReportState.enter_user)
async def handle_user_report(message: Message, state: FSMContext):
    user_input = message.text.strip()

    try:
        report = await generate_user_report(user_input)  # –ø–µ—Ä–µ–¥–∞—ë–º —Å—Ç—Ä–æ–∫—É –∫–∞–∫ –µ—Å—Ç—å
        await message.answer(report)
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    await state.clear()

@router.message(F.text.startswith("/admin/report/log"))
async def handle_admin_log_report(message: Message):
    tg_id = message.from_user.id
    if tg_id not in ADMIN_IDS:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        # –ü–∞—Ä—Å–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ)
        parts = message.text.strip().split("/")

        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π N (–Ω–∞–ø—Ä–∏–º–µ—Ä, /admin/report/log/7)
        if len(parts) == 4 and parts[3].isdigit():
            days = int(parts[3])
        else:
            days = 30  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        csv_data = await generate_cron_log_report(days)

        if csv_data.startswith("‚ùå"):
            await message.answer(csv_data)
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º CSV –∫–∞–∫ —Ñ–∞–π–ª
        output_file = BufferedInputFile(
            file=csv_data.encode("utf-8"),
            filename=f"log_report_last_{days}_days.csv"
        )

        await message.answer_document(
            document=output_file,
            caption=f"üìÑ –õ–æ–≥–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π"
        )

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")

# --- DEBUG: –≤—ã–≤–æ–¥–∏–º –≤—Å—ë, —á—Ç–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤ choosing_mode
@router.message(AdminReportState.choosing_mode)
async def debug_report_state(message: Message, state: FSMContext):
    current_state = await state.get_state()
    print(f"üõ† DEBUG ‚Äî choosing_mode –∞–∫—Ç–∏–≤–µ–Ω!")
    print(f"üîπ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}")
    print(f"üîπ –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")

    await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –≤ –º–µ–Ω—é –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel.")
