from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from core.config import ADMIN_IDS
from db.models import get_category_stats, add_category, delete_category
from bot.keyboards import admin_menu_keyboard


router = Router()

# Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥
def admin_menu_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="admin_stats")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—Ä–æ–≤–Ω—è–º", callback_data="admin_stats_levels")],
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="admin_add_category")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="admin_delete_category")],
        [InlineKeyboardButton(text="üìò –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É—Ä–æ–≤–Ω–∏", callback_data="admin_list_levels")],
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å", callback_data="admin_add_level")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å", callback_data="admin_delete_level")]
    ])

@router.message(F.text == "/admin")
async def admin_entry(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    await message.answer("üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_menu_keyboard())

@router.callback_query(F.data == "admin_stats")
async def show_stats(callback: types.CallbackQuery):
    stats = await get_category_stats()
    text = "\n".join(f"üìö {row['–∫–∞—Ç–µ–≥–æ—Ä–∏—è']}: {row['–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Å–ª–æ–≤']}" for row in stats)
    await callback.message.answer(f"üìä –ö–æ–ª-–≤–æ —Å–ª–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n\n{text}", reply_markup=admin_menu_keyboard())

# –í –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–µ:
# - –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã "admin_add_category", "admin_delete_category"

from aiogram.fsm.state import State, StatesGroup

class AdminFSM(StatesGroup):
    waiting_for_new_level = State()
    waiting_for_level_to_delete = State()
    waiting_for_new_category = State()
    waiting_for_category_to_delete = State()

@router.callback_query(F.data == "admin_add_category")
async def prompt_add_category(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –∂–∏–≤–æ—Ç–Ω—ã–µ, —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç):\n‚ö†Ô∏è –¢–æ–ª—å–∫–æ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ!")
    await state.set_state(AdminFSM.waiting_for_new_category)

@router.message(AdminFSM.waiting_for_new_category)
async def add_category_handler(message: types.Message, state: FSMContext):
    name = message.text.strip().lower()
    result = await add_category(name)
    await message.answer(result)
    await state.clear()
    await message.answer("üîß –ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=admin_menu_keyboard())

@router.callback_query(F.data == "admin_delete_category")
async def prompt_delete_category(callback: types.CallbackQuery, state: FSMContext):
    from db.models import get_all_categories
    categories = await get_all_categories()
    cat_list = "\n".join(f"üîπ {c}" for c in categories)
    await callback.message.answer(f"‚ùó –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å:\n\nüìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n{cat_list}")
    await state.set_state(AdminFSM.waiting_for_category_to_delete)

@router.message(AdminFSM.waiting_for_category_to_delete)
async def delete_category_handler(message: types.Message, state: FSMContext):
    name = message.text.strip().lower()
    result = await delete_category(name)
    await message.answer(result)
    await state.clear()
    await message.answer("üîß –ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=admin_menu_keyboard())

@router.callback_query(F.data == "admin_list_levels")
async def list_levels(callback: types.CallbackQuery):
    from db.models import get_all_levels_text
    levels = await get_all_levels_text()
    text = "\n".join(f"üîπ {lev}" for lev in levels)
    await callback.message.answer(f"üìò –°–ø–∏—Å–æ–∫ —É—Ä–æ–≤–Ω–µ–π:\n\n{text}", reply_markup=admin_menu_keyboard())

@router.callback_query(F.data == "admin_add_level")
async def prompt_add_level(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: –Ω–∞—á–∞–ª—å–Ω—ã–π, —Å—Ä–µ–¥–Ω–∏–π):\n‚ö†Ô∏è –¢–æ–ª—å–∫–æ –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω–æ–µ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ!")
    await state.set_state(AdminFSM.waiting_for_new_level)

@router.message(AdminFSM.waiting_for_new_level)
async def add_level_handler(message: types.Message, state: FSMContext):
    from db.models import add_level
    name = message.text.strip().lower()
    result = await add_level(name)
    await message.answer(result)
    await state.clear()
    await message.answer("üîß –ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=admin_menu_keyboard())

@router.callback_query(F.data == "admin_delete_level")
async def prompt_delete_level(callback: types.CallbackQuery, state: FSMContext):
    from db.models import get_all_levels_text
    levels = await get_all_levels_text()
    lev_list = "\n".join(f"üîπ {l}" for l in levels)
    await callback.message.answer(f"‚ùó –í–≤–µ–¥–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å:\n\nüìò –î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Ä–æ–≤–Ω–∏:\n{lev_list}")
    await state.set_state(AdminFSM.waiting_for_level_to_delete)

@router.message(AdminFSM.waiting_for_level_to_delete)
async def delete_level_handler(message: types.Message, state: FSMContext):
    from db.models import delete_level
    name = message.text.strip().lower()
    result = await delete_level(name)
    await message.answer(result)
    await state.clear()
    await message.answer("üîß –ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=admin_menu_keyboard())

@router.callback_query(F.data == "admin_stats_levels")
async def show_level_stats(callback: types.CallbackQuery):
    from db.models import get_level_stats
    stats = await get_level_stats()
    text = "\n".join(f"üìò {row['—É—Ä–æ–≤–µ–Ω—å']}: {row['–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Å–ª–æ–≤']}" for row in stats)
    await callback.message.answer(f"üìä –ö–æ–ª-–≤–æ —Å–ª–æ–≤ –ø–æ —É—Ä–æ–≤–Ω—è–º:\n\n{text}", reply_markup=admin_menu_keyboard())