from aiogram import Router, types, F, Bot
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton

from core.config import ADMIN_IDS, DB
from db.models import (
    get_category_stats,
    get_level_stats,
    add_category,
    delete_category,
    add_level,
    delete_level,
    get_all_levels_text,
)
from db.importer import import_words_from_json
from core.converter import convert_csv_to_json

import os

router = Router()

def admin_menu_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="admin_stats")],
        [InlineKeyboardButton(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—Ä–æ–≤–Ω—è–º", callback_data="admin_stats_levels")],
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="admin_add_category")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="admin_delete_category")],
        [InlineKeyboardButton(text="üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É—Ä–æ–≤–Ω–∏", callback_data="admin_list_levels")],
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å", callback_data="admin_add_level")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å", callback_data="admin_delete_level")],
    ])

@router.message(Command("admin"))
@router.message(F.text.lower() == "/admin")
async def admin_entry(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    await message.answer("üîß –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_menu_keyboard())

@router.message(F.document)
async def handle_csv_upload(message: Message, bot: Bot, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    if not message.document.file_name.endswith(".csv"):
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .csv")
        return

    os.makedirs("data/uploads", exist_ok=True)
    file_path = f"data/uploads/{message.document.file_name}"
    file = await bot.get_file(message.document.file_id)
    await bot.download_file(file.file_path, destination=file_path)

    json_path = "data/words.json"
    convert_csv_to_json(file_path, json_path)
    result = await import_words_from_json(json_path, DB)

    await message.answer(
        f"‚úÖ –§–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω.\n"
        f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {result['added']}\n"
        f"–ü—Ä–æ–ø—É—â–µ–Ω–æ (–¥—É–±–ª–∏–∫–∞—Ç—ã): {len(result['duplicates'])}\n"
        f"–û—à–∏–±–∫–∏: {len(result['errors'])}"
    )

@router.callback_query(F.data == "admin_stats")
async def show_stats(callback: CallbackQuery):
    stats = await get_category_stats()
    lines = [f"{r['–∫–∞—Ç–µ–≥–æ—Ä–∏—è']}: {r['–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Å–ª–æ–≤']}" for r in stats]
    await callback.message.answer("üìä –ö–æ–ª-–≤–æ —Å–ª–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:" + "\n".join(lines))

@router.callback_query(F.data == "admin_stats_levels")
async def show_level_stats(callback: CallbackQuery):
    stats = await get_level_stats()
    lines = [f"{r['—É—Ä–æ–≤–µ–Ω—å']}: {r['–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Å–ª–æ–≤']}" for r in stats]
    await callback.message.answer("üìà –ö–æ–ª-–≤–æ —Å–ª–æ–≤ –ø–æ —É—Ä–æ–≤–Ω—è–º:" + "\n".join(lines))

@router.callback_query(F.data == "admin_add_category")
async def prompt_add_category(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
    await state.set_state("awaiting_new_category")

@router.message(F.text, state="awaiting_new_category")
async def receive_new_category(message: Message, state: FSMContext):
    result = await add_category(message.text)
    await message.answer(result)
    await state.clear()

@router.callback_query(F.data == "admin_delete_category")
async def prompt_delete_category(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:")
    await state.set_state("awaiting_delete_category")

@router.message(F.text, state="awaiting_delete_category")
async def receive_category_to_delete(message: Message, state: FSMContext):
    result = await delete_category(message.text)
    await message.answer(result)
    await state.clear()

@router.callback_query(F.data == "admin_add_level")
async def prompt_add_level(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è:")
    await state.set_state("awaiting_new_level")

@router.message(F.text, state="awaiting_new_level")
async def receive_new_level(message: Message, state: FSMContext):
    result = await add_level(message.text)
    await message.answer(result)
    await state.clear()

@router.callback_query(F.data == "admin_delete_level")
async def prompt_delete_level(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å:")
    await state.set_state("awaiting_delete_level")

@router.message(F.text, state="awaiting_delete_level")
async def receive_level_to_delete(message: Message, state: FSMContext):
    result = await delete_level(message.text)
    await message.answer(result)
    await state.clear()

@router.callback_query(F.data == "admin_list_levels")
async def list_all_levels(callback: CallbackQuery):
    levels = await get_all_levels_text()
    await callback.message.answer("üìã –°–ø–∏—Å–æ–∫ —É—Ä–æ–≤–Ω–µ–π:" + "\n".join(levels))