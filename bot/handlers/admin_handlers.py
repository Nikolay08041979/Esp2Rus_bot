# --- –ù–æ–≤—ã–π —Ñ–∞–π–ª: bot/handlers/admin_handlers.py ---

from aiogram import Router, Bot, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

from core.config import ADMIN_IDS, DB
from core.file_utils import save_uploaded_csv, save_import_log
from db.models import (
    get_category_stats,
    get_level_stats,
    add_category,
    delete_category,
    add_level,
    delete_level,
    get_all_levels_text,
)
from db.importer import import_words_from_json
from core.converter import convert_csv_to_json
from bot.states.admin_states import AdminStates

router = Router()

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ ---
def admin_menu_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="admin_stats")],
            [InlineKeyboardButton(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—Ä–æ–≤–Ω—è–º", callback_data="admin_stats_levels")],
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="admin_add_category")],
            [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="admin_delete_category")],
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å", callback_data="admin_add_level")],
            [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å", callback_data="admin_delete_level")],
        ]
    )

# --- –ê–¥–º–∏–Ω—Å–∫–∏–π –≤—Ö–æ–¥ ---
@router.message(Command("admin"), StateFilter("*"))
async def admin_entry(message: Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    await state.clear()
    await message.answer("üîß –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_menu_keyboard())


# @router.message(Command("admin"))
# async def admin_entry(message: Message):
#     if message.from_user.id not in ADMIN_IDS:
#         await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
#         return
#     await message.answer("üîß –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_menu_keyboard())

# --- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º ---
@router.callback_query(F.data == "admin_stats")
async def show_stats(callback: CallbackQuery):
    stats = await get_category_stats()
    lines = [f"{r['–∫–∞—Ç–µ–≥–æ—Ä–∏—è']}: {r['–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Å–ª–æ–≤']}" for r in stats]
    await callback.message.answer("üìä –ö–æ–ª-–≤–æ —Å–ª–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n\n" + "\n".join(lines))

# --- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—Ä–æ–≤–Ω—è–º ---
@router.callback_query(F.data == "admin_stats_levels")
async def show_level_stats(callback: CallbackQuery):
    stats = await get_level_stats()
    lines = [f"{r['—É—Ä–æ–≤–µ–Ω—å']}: {r['–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Å–ª–æ–≤']}" for r in stats]
    await callback.message.answer("üìà –ö–æ–ª-–≤–æ —Å–ª–æ–≤ –ø–æ —É—Ä–æ–≤–Ω—è–º:\n\n" + "\n".join(lines))

# --- –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é ---
@router.callback_query(F.data == "admin_add_category")
async def prompt_add_category(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
    await state.set_state(AdminStates.awaiting_new_category)

@router.message(AdminStates.awaiting_new_category)
async def receive_new_category(message: Message, state: FSMContext):
    result = await add_category(message.text)
    await message.answer(result)
    await state.clear()

# --- –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é ---
@router.callback_query(F.data == "admin_delete_category")
async def prompt_delete_category(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("üóë –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    await state.set_state(AdminStates.awaiting_delete_category)

@router.message(AdminStates.awaiting_delete_category)
async def receive_category_to_delete(message: Message, state: FSMContext):
    result = await delete_category(message.text)
    await message.answer(result)
    await state.clear()

# --- –î–æ–±–∞–≤–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å ---
@router.callback_query(F.data == "admin_add_level")
async def prompt_add_level(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è:")
    await state.set_state(AdminStates.awaiting_new_level)

@router.message(AdminStates.awaiting_new_level)
async def receive_new_level(message: Message, state: FSMContext):
    result = await add_level(message.text)
    await message.answer(result)
    await state.clear()

# --- –£–¥–∞–ª–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å ---
@router.callback_query(F.data == "admin_delete_level")
async def prompt_delete_level(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("üóë –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    await state.set_state(AdminStates.awaiting_delete_level)

@router.message(AdminStates.awaiting_delete_level)
async def receive_level_to_delete(message: Message, state: FSMContext):
    result = await delete_level(message.text)
    await message.answer(result)
    await state.clear()

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ CSV-—Ñ–∞–π–ª–æ–≤ ---
@router.message(F.document)
async def handle_csv_upload(message: Message, bot: Bot, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    if not message.document.file_name.endswith(".csv"):
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .csv")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    file = await bot.get_file(message.document.file_id)
    file_data = await bot.download_file(file.file_path)
    file_path = save_uploaded_csv(message.document.file_name, file_data.read())

    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è CSV ‚Üí JSON
    json_path = file_path + ".json"
    convert_csv_to_json(file_path, json_path)

    # –ò–º–ø–æ—Ä—Ç —Å–ª–æ–≤
    result = await import_words_from_json(json_path, DB)

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
    log_path = save_import_log(result)

    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    msg = (
        "‚úÖ **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:**\n\n"
        f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–ª–æ–≤: **{result['added']}**\n"
        f"‚ûñ –î—É–±–ª–∏–∫–∞—Ç—ã: **{len(result['duplicates'])}**\n"
        f"‚ö†Ô∏è –û—à–∏–±–∫–∏: **{len(result['errors'])}**\n\n"
        f"üìù –õ–æ–≥: `{log_path}`"
    )
    await message.answer(msg, parse_mode="Markdown")