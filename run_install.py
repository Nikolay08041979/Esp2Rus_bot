import asyncio
import asyncpg
import subprocess
import argparse
from datetime import datetime
from pathlib import Path
from core.config import DB, ENABLE_DROP_TABLES, ENABLE_RESTORE_DATA, BASE_DIR, LOGS_DIR
from db.install_config import INSTALL_SCHEMA
from core.config import ADMIN_IDS, BOT_TOKEN
from aiogram import Bot

# === –ü—É—Ç–∏ ===
CREATE_DIR = BASE_DIR / "db" / "create" / "tables"
VIEW_DIR = BASE_DIR / "db" / "create" / "views"
DUMP_FILE = BASE_DIR / "backup_7_tables.sql"
ANALYTICS_SCRIPT = BASE_DIR / "analytics" / "metrics" / "run_sync_all_clients_with_tg_notify.py"
LOG_FILE = LOGS_DIR / "run_install.log"

# === –¢–∞–±–ª–∏—Ü—ã –∏–∑ –¥–∞–º–ø–∞
RESTORED_TABLES = {
    "client_info", "client_analytics", "dictionary", "word_category",
    "study_level", "study_levels", "learned_words"
}

def log(message):
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    line = f"[{timestamp}] {message}"
    print(line)
    with open(LOG_FILE, "a", encoding="utf-8") as f:
        f.write(line + "\n")

async def execute_sql_file(conn, file_path, object_type="SQL", errors=None):
    try:
        sql = file_path.read_text()
        await conn.execute(sql)
        log(f"[OK] {object_type}: {file_path.name}")
    except Exception as e:
        log(f"[ERROR] {object_type}: {file_path.name} ‚Äî {e}")
        if errors is not None:
            errors.append(f"{object_type}: {file_path.name} ‚Äî {e}")

async def drop_restored_tables(conn, errors):
    for table in RESTORED_TABLES:
        try:
            await conn.execute(f'DROP TABLE IF EXISTS "{table}" CASCADE;')
            log(f"üóë –£–¥–∞–ª–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ (–∏–∑ –¥–∞–º–ø–∞): {table}")
        except Exception as e:
            log(f"[DROP ERROR] {table}: {e}")
            errors.append(f"DROP {table} ‚Äî {e}")

async def install_tables(conn, errors):
    log("üîÅ –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...")
    for table in sorted(INSTALL_SCHEMA.get("tables", {}), key=lambda k: INSTALL_SCHEMA["tables"][k]):
        if table in RESTORED_TABLES:
            continue
        if ENABLE_DROP_TABLES:
            try:
                await conn.execute(f'DROP TABLE IF EXISTS "{table}" CASCADE;')
                log(f"üóë –£–¥–∞–ª–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞: {table}")
            except Exception as e:
                log(f"[DROP ERROR] {table}: {e}")
                errors.append(f"DROP {table} ‚Äî {e}")
        file_path = CREATE_DIR / f"{table}.sql"
        if file_path.exists():
            await execute_sql_file(conn, file_path, "TABLE", errors)
        else:
            log(f"[SKIP] –§–∞–π–ª {file_path.name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            errors.append(f"–§–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {file_path.name}")

async def install_views(conn, errors):
    log("üîÅ –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ VIEW'—à–µ–∫...")
    for view in sorted(INSTALL_SCHEMA.get("views", {}), key=lambda k: INSTALL_SCHEMA["views"][k]):
        file_path = VIEW_DIR / f"{view}.sql"
        if file_path.exists():
            await execute_sql_file(conn, file_path, "VIEW", errors)
        else:
            log(f"[SKIP] –§–∞–π–ª {file_path.name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            errors.append(f"–§–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {file_path.name}")

async def restore_from_dump(errors):
    if not DUMP_FILE.exists():
        log(f"[SKIP] –î–∞–º–ø {DUMP_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        errors.append(f"–î–∞–º–ø –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {DUMP_FILE}")
        return
    log(f"‚ôªÔ∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –¥–∞–º–ø–∞: {DUMP_FILE.name}")
    cmd = [
        "psql",
        "-U", DB["user"],
        "-h", DB["host"],
        "-p", str(DB["port"]),
        "-d", DB["database"],
        "-f", str(DUMP_FILE)
    ]
    try:
        subprocess.run(cmd, check=True)
        log("‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    except subprocess.CalledProcessError as e:
        log(f"[RESTORE ERROR] {e}")
        errors.append(f"–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ –¥–∞–º–ø–∞: {e}")

async def run_post_restore_checks(conn, errors):
    log("üîç –ü–æ—Å—Ç-–ø—Ä–æ–≤–µ—Ä–∫–∞: –≤–∞–ª–∏–¥–∞—Ü–∏—è client_id –≤ client_analytics ...")
    try:
        result = await conn.fetchval("""
            SELECT COUNT(*) FROM client_analytics
            WHERE client_id NOT IN (SELECT client_id FROM client_info);
        """)
        if result == 0:
            log("‚úÖ –í—Å–µ client_id –≤ client_analytics —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç client_info")
        else:
            log(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {result} –∑–∞–ø–∏—Å–µ–π client_analytics –±–µ–∑ client_info")

        log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏ level_id_current...")
        null_levels = await conn.fetchval("""
            SELECT COUNT(*) FROM client_analytics
            WHERE level_id_current IS NULL;
        """)
        if null_levels == 0:
            log("‚úÖ –í—Å–µ –∑–∞–ø–∏—Å–∏ –≤ client_analytics —Å–æ–¥–µ—Ä–∂–∞—Ç level_id_current")
        else:
            log(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {null_levels} –∑–∞–ø–∏—Å–µ–π –±–µ–∑ —É—Ä–æ–≤–Ω—è level_id_current")

    except Exception as e:
        log(f"[POST-CHECK ERROR] {e}")
        errors.append(f"POST-CHECK ERROR: {e}")

async def notify_admins(message: str):
    try:
        bot = Bot(token=BOT_TOKEN)
        for admin_id in ADMIN_IDS:
            await bot.send_message(chat_id=admin_id, text=message)
        await bot.session.close()
    except Exception as e:
        log(f"[TELEGRAM ERROR] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

async def run_install():
    parser = argparse.ArgumentParser()
    parser.add_argument("--sync", action="store_true", help="–ó–∞–ø—É—Å–∫–∞—Ç—å sync –º–µ—Ç—Ä–∏–∫—É –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏")
    args = parser.parse_args()

    errors = []
    conn = await asyncpg.connect(**DB)
    log(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö {DB['database']}")

    if ENABLE_RESTORE_DATA:
        await drop_restored_tables(conn, errors)
        await restore_from_dump(errors)

    await install_tables(conn, errors)
    await install_views(conn, errors)
    await run_post_restore_checks(conn, errors)
    await conn.close()

    if args.sync:
        log("üöÄ –ó–∞–ø—É—Å–∫ sync –º–µ—Ç—Ä–∏–∫–∏...")
        try:
            print("[DEBAG]üîß –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫...")
            subprocess.run(["python", "-m", "analytics.metrics.run_sync_all_clients_with_tg_notify"], check=True)
            log("‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        except subprocess.CalledProcessError as e:
            errors.append(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–µ—Ç—Ä–∏–∫: {e}")

    # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if not errors:
        summary = "üßæ –†–ï–ó–£–õ–¨–¢–ê–¢ –£–°–¢–ê–ù–û–í–ö–ò:\n‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –±–µ–∑ –æ—à–∏–±–æ–∫."
    else:
        summary = "üßæ –†–ï–ó–£–õ–¨–¢–ê–¢ –£–°–¢–ê–ù–û–í–ö–ò:\n‚ö†Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏:\n" + "\n".join([f"  - {e}" for e in errors])

    for line in summary.split("\n"):
        log(line)

    try:
        await notify_admins(summary)
    except Exception:
        pass

if __name__ == "__main__":
    asyncio.run(run_install())
