import asyncio
import asyncpg
import os
from pathlib import Path
from core.config import DB
from db.install_config import INSTALL_SCHEMA

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
ENABLE_DROP = True
ENABLE_RESTORE = True

CREATE_DIR = Path(__file__).resolve().parent / "create"
BACKUP_DIR = Path(__file__).resolve().parent.parent / "data" / "backup" / "sql"

async def execute_sql_file(conn, file_path, errors: list):
    try:
        sql = file_path.read_text()
        await conn.execute(sql)
        print(f"[OK] –í—ã–ø–æ–ª–Ω–µ–Ω: {file_path.name}")
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –≤ {file_path.name}: {e}")
        errors.append(f"‚ùå {file_path.name} ‚Äî {e}")

async def restore_data(conn, table_name, errors: list):
    backup_file = BACKUP_DIR / f"{table_name}_latest.sql"
    if backup_file.exists():
        print(f"‚ôªÔ∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ {backup_file.name}")
        try:
            sql = backup_file.read_text()
            await conn.execute(sql)
            print(f"[RESTORED] {table_name}")
        except Exception as e:
            print(f"[RESTORE ERROR] {table_name}: {e}")
            errors.append(f"‚ö†Ô∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ {table_name} ‚Äî {e}")
    else:
        print(f"[SKIP] –ù–µ—Ç —Ñ–∞–π–ª–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è {table_name}")

async def install():
    conn = await asyncpg.connect(**DB)
    print("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")

    errors = []

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–±–ª–∏—Ü
    for table in sorted(INSTALL_SCHEMA.get("tables", {}), key=lambda k: INSTALL_SCHEMA["tables"][k]):
        if ENABLE_DROP:
            try:
                await conn.execute(f"DROP TABLE IF EXISTS {table} CASCADE;")
                print(f"üóë –£–¥–∞–ª–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞: {table}")
            except Exception as e:
                print(f"[DROP ERROR] {table}: {e}")
                errors.append(f"‚ùå DROP {table} ‚Äî {e}")

        file_path = CREATE_DIR / f"create_table_{table}.sql"
        if file_path.exists():
            print(f"‚öôÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã: {table}")
            await execute_sql_file(conn, file_path, errors)

            if ENABLE_RESTORE:
                await restore_data(conn, table, errors)
        else:
            print(f"[SKIP] –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path.name}")
            errors.append(f"üìÇ create_table_{table}.sql –Ω–µ –Ω–∞–π–¥–µ–Ω")

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ VIEW
    for view in sorted(INSTALL_SCHEMA.get("views", {}), key=lambda k: INSTALL_SCHEMA["views"][k]):
        file_path = CREATE_DIR / f"create_view_{view}.sql"
        if file_path.exists():
            print(f"üîç –°–æ–∑–¥–∞–Ω–∏–µ VIEW: {view}")
            await execute_sql_file(conn, file_path, errors)
        else:
            print(f"[SKIP] –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path.name}")
            errors.append(f"üìÇ create_view_{view}.sql –Ω–µ –Ω–∞–π–¥–µ–Ω")

    await conn.close()

    # –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    print("\nüßæ –†–ï–ó–£–õ–¨–¢–ê–¢ –£–°–¢–ê–ù–û–í–ö–ò:")
    if not errors:
        print("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –±–µ–∑ –æ—à–∏–±–æ–∫.")
    else:
        print("‚ö†Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏:")
        for err in errors:
            print(f"   - {err}")

if __name__ == "__main__":
    asyncio.run(install())
